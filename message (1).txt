#include <stdio.h>
#include <stdlib.h>

typedef struct
{
  int v;
  int w;
} Edge;

struct graph
{
  int V;
  int E;
  int **adj;
  int **tc;
};
typedef struct graph *Graph;

int *pre, counter, conectado;
Graph Garfo;

int **coolMatriz(int n)
{
  int **matriz;

  matriz = malloc(n * sizeof(int *));

  for (int i = 0; i < n; i++)
  {
    matriz[i] = malloc(n * sizeof(int));
  }

  return matriz;
}

void GRAPHInit(int n)
{
  Garfo = malloc(sizeof(*Garfo));
  Garfo->V = n;
  Garfo->E = 0;
  Garfo->adj = coolMatriz(n);
  conectado = 0;
  counter = 0;
  pre = malloc(n * sizeof(int));
}

void InsertEdge(Edge e, int d)
{
  if (Garfo->adj[e.v][e.w] == 0)
    Garfo->E++;

  if (d == 1)
  {
    Garfo->adj[e.v][e.w] = 1;
  }

  if (d == 2)
  {
    Garfo->adj[e.v][e.w] = 1;
    Garfo->adj[e.w][e.v] = 1;
  }
}

Edge EDGE(int v, int w)
{
  Edge edgar;
  edgar.v = v;
  edgar.w = w;
  return edgar;
}

void dfsr(Edge e)
{
  pre[e.w] = counter++;

  for (int t = 0; t < Garfo->V; t++)
    if (Garfo->adj[e.w][t] != 0)
      if (pre[t] == -1)
        dfsr(EDGE(e.w, t));
}

void GRAPHtc()
{
  int i, s, t;
  Garfo->tc = coolMatriz(Garfo->V);

  for (s = 0; s < Garfo->V; s++)
  {
    for (t = 0; t < Garfo->V; t++)
    {
      Garfo->tc[s][t] = Garfo->adj[s][t];
    }
  }
  for (s = 0; s < Garfo->V; s++)
  {
    Garfo->tc[s][s] = 1;
  }

  for (i = 0; i < Garfo->V; i++)
  {
    for (s = 0; s < Garfo->V; s++)
    {
      if (Garfo->tc[s][i] == 1)
      {
        for (t = 0; t < Garfo->V; t++)
        {
          if (Garfo->tc[i][t] == 1)
          {
            Garfo->tc[s][t] = 1;
          }
        }
      }
    }
  }
}

int main()
{
  int N, M, V, W, P;

  do
  {
    scanf("%d", &N);
    if (N == 0)
    {
      return 0;
    }

    scanf("%d", &M);

    GRAPHInit(N);

    for (int i = 0; i < M; i++)
    {
      scanf("%d %d %d", &V, &W, &P);
      InsertEdge(EDGE(V - 1, W - 1), P);
    }

    GRAPHtc();

    int conexo = 1;

    for (int i = 0; i < Garfo->V; i++)
    {
      for (int j = 0; j < Garfo->V; j++)
      {
        if (Garfo->tc[i][j] == 0)
        {
          conexo = 0;
        }
      }
    }

    printf("%d\n", conexo);

    free(Garfo);
    free(pre);

  } while (N != 0);

  return 0;
}